/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.rxtx.gui;

import de.abring.rxtx.SerialConnection;
import de.abring.rxtx.gui.dialogues.MSG;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

/**
 *
 * @author Karima
 */
public class PortSelector extends javax.swing.JPanel {

    private SerialConnection serialConnection;

    /**
     * Creates new form PortSelector
     */
    public PortSelector() {
        initComponents();
        this.serialConnection = null;
    }
    
    public PortSelector(SerialConnection serialConnaction) {
        initComponents();
        this.serialConnection = serialConnaction;
        updatePortlist();
    }

    public final void updatePortlist() {
        if (this.serialConnection == null) {
            return;
        }
        if (this.serialConnection.isConnected() && MSG.msgConnectionWillBeLost(this)) {
            this.serialConnection.disconnect();
            this.updateBtnConnectDisconnect();
            return;
        }
        String lastSelectedPort = (String) this.jCbxPortlist.getSelectedItem();
        this.jCbxPortlist.removeAllItems();
        boolean lastSelectedPortIsAvailable = false;
        String[] availableCommPorts = this.serialConnection.getAvailableCommPortNames();
        
        Arrays.sort(availableCommPorts);
        Collections.sort(Arrays.asList(availableCommPorts), new Comparator<String>() {
            @Override
            public int compare(String port1, String port2)
            {
                int portID1 = Integer.parseInt(port1.replace("COM", "").replace("PARALLEL", ""));
                int portID2 = Integer.parseInt(port2.replace("COM", "").replace("PARALLEL", ""));
                if (portID1 > portID2) {
                    return 1;
                } else if (portID1 < portID2) {
                    return -1;
                } else {
                    return 0;
                }
            }
        });

        for (String item : availableCommPorts) {
            if (item == null) {
                continue;
            }
            this.jCbxPortlist.addItem(item);
            if (lastSelectedPort != null && lastSelectedPort.equals(item)) {
                lastSelectedPortIsAvailable = true;
            }
        }
        if (lastSelectedPortIsAvailable) {
            this.jCbxPortlist.setSelectedItem(lastSelectedPort);
        }
    }
    
    public final void updateBtnConnectDisconnect() {
        if (this.serialConnection == null) {
            return;
        }
        if (this.serialConnection.isConnected()) {
            jBtnConnectDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/abring/icons/X.png"))); // NOI18N
            jBtnConnectDisconnect.setText("Disonnect");
            jBtnConnectDisconnect.setToolTipText("Disconnect the current Port");
        } else {
            jBtnConnectDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/abring/icons/Checkmark 1.png"))); // NOI18N
            jBtnConnectDisconnect.setText("Connect");
            jBtnConnectDisconnect.setToolTipText("Connect to selected Port");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCbxPortlist = new javax.swing.JComboBox<>();
        jBtnRefresh = new javax.swing.JButton();
        jBtnConnectDisconnect = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Port-Selector"));

        jCbxPortlist.setMinimumSize(new java.awt.Dimension(100, 35));
        jCbxPortlist.setPreferredSize(new java.awt.Dimension(100, 35));
        jCbxPortlist.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCbxPortlistItemStateChanged(evt);
            }
        });
        jCbxPortlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbxPortlistActionPerformed(evt);
            }
        });

        jBtnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/abring/icons/Refresh 1.png"))); // NOI18N
        jBtnRefresh.setToolTipText("Refresh Port-List");
        jBtnRefresh.setPreferredSize(new java.awt.Dimension(35, 35));
        jBtnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRefreshActionPerformed(evt);
            }
        });

        jBtnConnectDisconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/abring/icons/Checkmark 1.png"))); // NOI18N
        jBtnConnectDisconnect.setText("Connect");
        jBtnConnectDisconnect.setToolTipText("Connect to selected Port");
        jBtnConnectDisconnect.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jBtnConnectDisconnect.setPreferredSize(new java.awt.Dimension(73, 35));
        jBtnConnectDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnConnectDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnConnectDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCbxPortlist, 0, 208, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCbxPortlist, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnConnectDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCbxPortlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbxPortlistActionPerformed
    }//GEN-LAST:event_jCbxPortlistActionPerformed

    private void jBtnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRefreshActionPerformed
        this.updatePortlist();
    }//GEN-LAST:event_jBtnRefreshActionPerformed

    private void jBtnConnectDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnConnectDisconnectActionPerformed
        if (this.serialConnection == null) {
            return;
        }
        if (this.serialConnection.isConnected()) {
            this.serialConnection.disconnect();
        } else {
            this.serialConnection.connect();
        }
        this.updateBtnConnectDisconnect();
    }//GEN-LAST:event_jBtnConnectDisconnectActionPerformed

    private void jCbxPortlistItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCbxPortlistItemStateChanged
        if (this.serialConnection == null) {
            return;
        }
        if (this.serialConnection.isConnected() && MSG.msgConnectionWillBeLost(this)) {
            this.serialConnection.disconnect();
            this.updateBtnConnectDisconnect();
            return;
        }
        this.serialConnection.selectCommPort((String) this.jCbxPortlist.getSelectedItem());
    }//GEN-LAST:event_jCbxPortlistItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnConnectDisconnect;
    private javax.swing.JButton jBtnRefresh;
    private javax.swing.JComboBox<String> jCbxPortlist;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the serialConnection
     */
    public SerialConnection getSerialConnection() {
        return serialConnection;
    }

    /**
     * @param serialConnection the serialConnection to set
     */
    public void setSerialConnection(SerialConnection serialConnection) {
        this.serialConnection = serialConnection;
        updatePortlist();
    }
}
