/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.fetchremotes.gui;

import de.abring.fetchremotes.gui.dialogues.FileIO;
import de.abring.rxtx.PortEvent;
import de.abring.rxtx.PortListener;
import de.abring.rxtx.SerialConnection;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Karima
 */
public class FetchRemotes extends javax.swing.JFrame {

    private final SerialConnection serialConnection;
    DefaultListModel<String> model;
    private final Properties properties;

    private String version;
    private List<String> keys;
    private File workingDir;



    /**
     * Creates new form FetchRemotes
     */
    public FetchRemotes() {
        initComponents();
        this.version = "";
        this.keys = new ArrayList<>();
        this.workingDir = new File(System.getProperty("user.home") + System.getProperty("file.separator"));
        
        this.serialConnection = new SerialConnection();
        
        this.properties = new Properties();
        
        this.model = new DefaultListModel<>();
        this.jLstCommands.setModel(model);
        
        loadProperties();
        
        this.portSelector.setSerialConnection(this.serialConnection);
        this.serialConnection.getPortListener().add(new PortListener()  {
            @Override
            public void inputDetected(PortEvent pvt) {
                if (pvt.getID() == PortEvent.STRING) {
                    String input = (String) pvt.getSource();
                    model.add(0, input);
                }
            }
        });
    }
    
    private void loadProperties() {
        try {
            properties.load(new FileInputStream("FetchRemotes.properties"));
        } catch (IOException e) {
            System.out.println("Could not open Config file");
            System.exit(1);
        }
        this.version = this.properties.getProperty("version");
        
        this.keys.clear();
        this.keys.add("Name");
        this.keys.addAll(Arrays.asList(this.properties.getProperty("keys").split(",")));
        
        this.workingDir = new File(properties.getProperty("home_dir"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        jDesktop = new javax.swing.JDesktopPane();
        jPneChildFrame = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jBtnOpen = new javax.swing.JButton();
        jBtnSave = new javax.swing.JButton();
        jBtnNew = new javax.swing.JButton();
        portSelector = new de.abring.rxtx.gui.PortSelector();
        jSclPneLstCommands = new javax.swing.JScrollPane();
        jLstCommands = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fetch Remotes");

        jSplitPane.setDividerLocation(200);

        jDesktop.setBackground(new java.awt.Color(255, 255, 255));
        jDesktop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jDesktopLayout = new javax.swing.GroupLayout(jDesktop);
        jDesktop.setLayout(jDesktopLayout);
        jDesktopLayout.setHorizontalGroup(
            jDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1081, Short.MAX_VALUE)
        );
        jDesktopLayout.setVerticalGroup(
            jDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
        );

        jSplitPane.setRightComponent(jDesktop);

        jBtnOpen.setText("open");
        jBtnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOpenActionPerformed(evt);
            }
        });

        jBtnSave.setText("save");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jBtnNew.setText("new");
        jBtnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jBtnNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jBtnNew)
                .addComponent(jBtnOpen)
                .addComponent(jBtnSave))
        );

        jSclPneLstCommands.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLstCommands.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLstCommands.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLstCommandsMouseClicked(evt);
            }
        });
        jSclPneLstCommands.setViewportView(jLstCommands);

        javax.swing.GroupLayout jPneChildFrameLayout = new javax.swing.GroupLayout(jPneChildFrame);
        jPneChildFrame.setLayout(jPneChildFrameLayout);
        jPneChildFrameLayout.setHorizontalGroup(
            jPneChildFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneChildFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPneChildFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jSclPneLstCommands, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPneChildFrameLayout.setVerticalGroup(
            jPneChildFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneChildFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSclPneLstCommands, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
        );

        jSplitPane.setLeftComponent(jPneChildFrame);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1289, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNewActionPerformed
        Remotes newRemote = new Remotes(this, this.serialConnection);
        this.jDesktop.add(newRemote);
        newRemote.addRemote();
        newRemote.show();
    }//GEN-LAST:event_jBtnNewActionPerformed

    private void jLstCommandsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLstCommandsMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            if (this.jDesktop.getSelectedFrame() == null || !(this.jDesktop.getSelectedFrame() instanceof Remotes))
                return;
            Remotes remote = (Remotes)this.jDesktop.getSelectedFrame();
            String[] commandParts = this.jLstCommands.getSelectedValue().split(",");
            JSONArray commandArray = new JSONArray();
            commandArray.put(Long.parseLong(commandParts[0]));
            commandArray.put(Long.parseLong(commandParts[1]));
            commandArray.put(Long.parseLong(commandParts[2]));
            remote.setTextAtSelection(commandArray);
        }
    }//GEN-LAST:event_jLstCommandsMouseClicked

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        workingDir = new File(workingDir.getAbsolutePath() + System.getProperty("file.separator") + "remotes.json");
        saveAsIRRemote(workingDir);
    }//GEN-LAST:event_jBtnSaveActionPerformed

    private void jBtnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOpenActionPerformed
        openIRRemote();
    }//GEN-LAST:event_jBtnOpenActionPerformed

//    public void saveIRRemote(boolean saveAs) {
//        if (this.jPneParent.getSelectedFrame() == null)
//            return;    
//        IRRemote ir = (IRRemote) this.jPneParent.getSelectedFrame();
//        saveIRRemote(ir, saveAs);
//    }
//    
//    public void saveIRRemote(IRRemote ir, boolean saveAs) {
//        if (ir == null)
//            return;    
//        if (ir.getFilename() == null) {
//            workingDir = new File(workingDir.getAbsolutePath() + System.getProperty("file.separator") + ir.getTitle());
//            saveAsIRRemote(workingDir);
//            return;
//        }
//        if (!ir.getFilename().exists() || saveAs)
//            saveAsIRRemote(ir.getFilename());
//        saveToJSONFile(ir.getFilename());
//    }
//    
    public void saveAsIRRemote(File filename) {
        saveToJSONFile(FileIO.saveJSONFile(this, filename, filename.getAbsolutePath()));
    }
    
    public void openIRRemote() {
        File openJSONFile = FileIO.openJSONFile(this, workingDir.getAbsolutePath() + System.getProperty("file.separator") + "remotes.json");
        if (openJSONFile != null && openJSONFile.exists()) {
            workingDir = openJSONFile.getAbsoluteFile();
            String JSONText = "";
            try {
                Scanner scanner = new Scanner( openJSONFile, "UTF-8" );
                JSONText = scanner.useDelimiter("\\A").next();
                scanner.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FetchRemotes.class.getName()).log(Level.SEVERE, null, ex);
                JSONText = "";
            }
            if (JSONText.isEmpty())
                return;
            JSONObject remotesList;
            try {
                remotesList = new JSONObject(JSONText);
            } catch (JSONException ex) {
                Logger.getLogger(FetchRemotes.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            Remotes newRemote = new Remotes(this, this.serialConnection);
            
            for(Iterator iterator = remotesList.keySet().iterator(); iterator.hasNext();) {
                String key = (String) iterator.next();
                Object value = remotesList.get(key);
                if (value instanceof JSONObject)
                    newRemote.addThisRemote(key, (JSONObject) value);
            }
            
            this.jDesktop.add(newRemote);
            newRemote.show();
            
        }
    }
    
    private void saveToJSONFile(File filename) {
        if (this.jDesktop.getSelectedFrame() == null || !(this.jDesktop.getSelectedFrame() instanceof Remotes))
            return;
        if (filename == null)
            return;
        Remotes remote = (Remotes)this.jDesktop.getSelectedFrame();
        JSONObject all = remote.getJSONObject();
        System.out.println(all);
        FileWriter fileWriter = null;
        try {
            fileWriter = new FileWriter(filename);
            all.write(fileWriter);
        } catch (IOException ex) {
            Logger.getLogger(FetchRemotes.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(FetchRemotes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FetchRemotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FetchRemotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FetchRemotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FetchRemotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FetchRemotes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnNew;
    private javax.swing.JButton jBtnOpen;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JDesktopPane jDesktop;
    private javax.swing.JList<String> jLstCommands;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPneChildFrame;
    private javax.swing.JScrollPane jSclPneLstCommands;
    private javax.swing.JSplitPane jSplitPane;
    private de.abring.rxtx.gui.PortSelector portSelector;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * @return the keys
     */
    public List<String> getKeys() {
        return keys;
    }

    /**
     * @return the workingDir
     */
    public File getWorkingDir() {
        return workingDir;
    }
}
